"use strict";(globalThis.webpackChunkpencode_docs=globalThis.webpackChunkpencode_docs||[]).push([[3896],{2389:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"getting-started/language-preview","title":"Language Preview","description":"This page provides an overview of the PenCode language syntax. Understanding these core concepts will help you create complex generative art.","source":"@site/versioned_docs/version-alpha-1/getting-started/language-preview.md","sourceDirName":"getting-started","slug":"/getting-started/language-preview","permalink":"/pencode-docs/getting-started/language-preview","draft":false,"unlisted":false,"tags":[],"version":"alpha-1","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Your First Drawing","permalink":"/pencode-docs/getting-started/your-first-drawing"},"next":{"title":"Basic Shapes","permalink":"/pencode-docs/tutorials/basic-shapes"}}');var i=s(4848),a=s(8453);const t={sidebar_position:2},c="Language Preview",o={},l=[{value:"Basic Structure",id:"basic-structure",level:2},{value:"Object Creation",id:"object-creation",level:3},{value:"Parameters: Named vs. Unnamed (Ordered)",id:"parameters-named-vs-unnamed-ordered",level:3},{value:"The Parsing Rule",id:"the-parsing-rule",level:4},{value:"When it Causes an Error",id:"when-it-causes-an-error",level:4},{value:"Parameter Types",id:"parameter-types",level:2},{value:"Numbers",id:"numbers",level:3},{value:"Strings",id:"strings",level:3},{value:"Any (Code Snippets)",id:"any-code-snippets",level:3},{value:"Naming Objects",id:"naming-objects",level:2},{value:"Child Objects",id:"child-objects",level:2},{value:"Applying Modifiers",id:"applying-modifiers",level:2},{value:"Cloning Objects",id:"cloning-objects",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"language-preview",children:"Language Preview"})}),"\n",(0,i.jsx)(n.p,{children:"This page provides an overview of the PenCode language syntax. Understanding these core concepts will help you create complex generative art."}),"\n",(0,i.jsx)(n.h2,{id:"basic-structure",children:"Basic Structure"}),"\n",(0,i.jsx)(n.p,{children:"A PenCode script is a series of statements separated by commas. Each statement defines a vector object, names it, establishes a parent-child relationship, or applies a modifier."}),"\n",(0,i.jsx)(n.p,{children:"The language is designed to be readable and expressive, allowing you to describe a scene of objects and their relationships."}),"\n",(0,i.jsx)(n.h3,{id:"object-creation",children:"Object Creation"}),"\n",(0,i.jsxs)(n.p,{children:["The fundamental building block is the object creation statement. This is how you create a ",(0,i.jsx)(n.code,{children:"Cube"}),", ",(0,i.jsx)(n.code,{children:"Line"}),", or any other vector object."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-pencode",children:"ObjectName(parameter1: value1, parameter2: value2)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-pencode",children:"// Creates a Cube at position x=10, y=20 with the color red.\nRectangle(x: 10, y: 20, width: 50, height: 50, color: 'red')\n"})}),"\n",(0,i.jsx)(n.h3,{id:"parameters-named-vs-unnamed-ordered",children:"Parameters: Named vs. Unnamed (Ordered)"}),"\n",(0,i.jsx)(n.p,{children:"You can pass parameters to objects in two ways:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Named Parameters:"})," You explicitly write the name of the parameter followed by a colon and the value. This is the ",(0,i.jsx)(n.strong,{children:"highly recommended"})," approach as it makes your code clear and less prone to errors."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-pencode",children:"// Using named parameters is clear and safe.\nLine(x: 10, y: 20, x2: 100, y2: 100)\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Unnamed (Ordered) Parameters:"})," You can provide values without their names. In this case, the order in which you provide the values is crucial and must match the order defined by the object."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-pencode",children:"// Using unnamed parameters - order matters!\nLine(10, 20, 100, 100)\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.admonition,{title:"Watch Out! Mixing Parameter Styles",type:"caution",children:[(0,i.jsxs)(n.p,{children:["While the language allows you to mix named and unnamed parameters, it is ",(0,i.jsx)(n.strong,{children:"strongly discouraged"})," because it makes the code difficult to read and can lead to unexpected behavior or errors."]}),(0,i.jsx)(n.h4,{id:"the-parsing-rule",children:"The Parsing Rule"}),(0,i.jsxs)(n.p,{children:["The parser processes parameters in the order they appear. When it encounters an unnamed (positional) parameter, it assigns it to the ",(0,i.jsx)(n.strong,{children:"next available parameter slot"})," in the object's predefined parameter order."]}),(0,i.jsx)(n.p,{children:"This can get very confusing."}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example of confusing behavior:"})}),(0,i.jsxs)(n.p,{children:["Consider the ",(0,i.jsx)(n.code,{children:"Line"})," object, where the parameter order is ",(0,i.jsx)(n.code,{children:"x"}),", ",(0,i.jsx)(n.code,{children:"y"}),", ",(0,i.jsx)(n.code,{children:"x2"}),", ",(0,i.jsx)(n.code,{children:"y2"}),"."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-pencode",children:"// This code is valid, but very hard to understand.\nLine(10, y: 20, 100, 100)\n"})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"How it is parsed:"})}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["The first value ",(0,i.jsx)(n.code,{children:"10"})," is positional. The first available parameter is ",(0,i.jsx)(n.code,{children:"x"}),". So, ",(0,i.jsx)(n.code,{children:"x"})," is set to ",(0,i.jsx)(n.code,{children:"10"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The next parameter ",(0,i.jsx)(n.code,{children:"y: 20"})," is named. ",(0,i.jsx)(n.code,{children:"y"})," is set to ",(0,i.jsx)(n.code,{children:"20"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The next value ",(0,i.jsx)(n.code,{children:"100"})," is positional. The next available parameter is ",(0,i.jsx)(n.code,{children:"x2"})," (since ",(0,i.jsx)(n.code,{children:"x"})," and ",(0,i.jsx)(n.code,{children:"y"})," are taken). So, ",(0,i.jsx)(n.code,{children:"x2"})," is set to ",(0,i.jsx)(n.code,{children:"100"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The final value ",(0,i.jsx)(n.code,{children:"100"})," is positional. The next available parameter is ",(0,i.jsx)(n.code,{children:"y2"}),". So, ",(0,i.jsx)(n.code,{children:"y2"})," is set to ",(0,i.jsx)(n.code,{children:"100"}),"."]}),"\n"]}),(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Result:"})," The line is drawn with ",(0,i.jsx)(n.code,{children:"x=10"}),", ",(0,i.jsx)(n.code,{children:"y=20"}),", ",(0,i.jsx)(n.code,{children:"x2=100"}),", ",(0,i.jsx)(n.code,{children:"y2=100"}),". While this works, the person reading the code has to mentally track which positional slots have been filled."]}),(0,i.jsx)(n.h4,{id:"when-it-causes-an-error",children:"When it Causes an Error"}),(0,i.jsx)(n.p,{children:"An error occurs if you try to assign a value to the same parameter twice."}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-pencode",children:"// This will cause an error!\nRectangle(30, 40, 50, 50, x: 50)\n"})}),(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why it fails:"})}),(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["The first unnamed parameter ",(0,i.jsx)(n.code,{children:"30"})," is assigned to ",(0,i.jsx)(n.code,{children:"x"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The second unnamed parameter ",(0,i.jsx)(n.code,{children:"40"})," is assigned to ",(0,i.jsx)(n.code,{children:"y"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The parser then sees the named parameter ",(0,i.jsx)(n.code,{children:"x: 50"}),". Since ",(0,i.jsx)(n.code,{children:"x"})," has already been assigned a value, the interpreter throws an error."]}),"\n"]}),(0,i.jsxs)(n.p,{children:["To avoid all this confusion, ",(0,i.jsx)(n.strong,{children:"always stick to one style (either all named or all unnamed) per object statement."})]})]}),"\n",(0,i.jsx)(n.h2,{id:"parameter-types",children:"Parameter Types"}),"\n",(0,i.jsx)(n.p,{children:"The interpreter accepts three main types of values for parameters:"}),"\n",(0,i.jsx)(n.h3,{id:"numbers",children:"Numbers"}),"\n",(0,i.jsx)(n.p,{children:"Numbers can be integers or floating-point values. They are used for coordinates, sizes, and other numerical properties."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-pencode",children:"// Examples of using numbers\nRectangle(x: 50, y: 75.5, width: 50, height: 50)\nLine(x: 0, y: 0, x2: 100, y2: 100)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"strings",children:"Strings"}),"\n",(0,i.jsxs)(n.p,{children:["Strings are sequences of characters enclosed in ",(0,i.jsxs)(n.strong,{children:["double quotes (",(0,i.jsx)(n.code,{children:'"'}),")"]}),". They are typically used for names or specific text-based properties."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-pencode",children:'// Example of using a string\nBrush(type: "charcoal", color: "black")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"any-code-snippets",children:"Any (Code Snippets)"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Any"})," type allows you to pass a snippet of code directly to a parameter. This is a powerful feature for advanced customization. The code snippet must be enclosed in ",(0,i.jsxs)(n.strong,{children:["single quotes (",(0,i.jsx)(n.code,{children:"'"}),")"]}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["This is often used for colors, but can also be used for more complex logic, like in the ",(0,i.jsx)(n.code,{children:"Custom"})," object."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-pencode",children:"// Examples of using the Any type\nRectangle(color: 'red')\nCustom(draw: 'p.ellipse(10, 20, 30, 30)')\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Inside the single quotes, you can write code that will be executed by the p5.js rendering engine. For ",(0,i.jsx)(n.code,{children:"color"}),", you can use any valid p5.js color string. For objects like ",(0,i.jsx)(n.code,{children:"Custom"}),", you can write any valid p5.js drawing commands."]}),"\n",(0,i.jsx)(n.h2,{id:"naming-objects",children:"Naming Objects"}),"\n",(0,i.jsxs)(n.p,{children:["You can assign a name to an object using the ",(0,i.jsx)(n.code,{children:"AS"})," keyword. This allows you to reference it later, for example, as a parent for other objects. Object names must be unique."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-pencode",children:"ObjectName(...) AS objectName\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-pencode",children:"Rectangle(x: 0, y: 0) AS myRectangle\n"})}),"\n",(0,i.jsx)(n.h2,{id:"child-objects",children:"Child Objects"}),"\n",(0,i.jsxs)(n.p,{children:["You can create objects that are positioned relative to a parent object using the ",(0,i.jsx)(n.code,{children:"CHILD TO"})," keywords. The child object's coordinates will be relative to the parent's coordinates."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-pencode",children:"ObjectName(...) CHILD TO parentName\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-pencode",children:"Rectangle(x: 50, y: 50) AS parentRectangle,\n\n// This Rectangle's position (10, 10) is relative to parentRectangle (final position: 60, 60).\nRectangle(x: 10, y: 10) CHILD TO parentRectangle\n"})}),"\n",(0,i.jsx)(n.h2,{id:"applying-modifiers",children:"Applying Modifiers"}),"\n",(0,i.jsxs)(n.p,{children:["Modifiers change the properties of an object. They are applied using the ",(0,i.jsx)(n.code,{children:"SET"})," keyword. You can chain multiple modifiers."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-pencode",children:"ObjectName(...) SET ModifierName('value')\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Some of the most common modifiers are ",(0,i.jsx)(n.code,{children:"Color"})," and ",(0,i.jsx)(n.code,{children:"Layer"}),". For a complete list of all available modifiers, please see the ",(0,i.jsx)(n.a,{href:"../language-reference/modifiers/color",children:"Modifier Reference"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-pencode",children:"// Creates a cube and then sets its color to blue.\nRectangle(x: 0, y: 0) SET Color('blue')\n"})}),"\n",(0,i.jsx)(n.h2,{id:"cloning-objects",children:"Cloning Objects"}),"\n",(0,i.jsxs)(n.p,{children:["You can create a copy of a named object using the ",(0,i.jsx)(n.code,{children:"!"})," prefix. This is useful for creating multiple instances of a configured object without re-typing all its parameters."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-pencode",children:"!objectName(parameter1: value1, ...)\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," When cloning, you can override any of the original object's parameters."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-pencode",children:"// Create a template object.\nRectangle(color: 'blue') AS blueRectangle,\n\n// Clone the template and give it a new position.\n!blueRectangle(x: 50, y: 50)\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var r=s(6540);const i={},a=r.createContext(i);function t(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);